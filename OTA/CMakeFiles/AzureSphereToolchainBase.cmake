IF(NOT ${CMAKE_GENERATOR} STREQUAL "Ninja")
    MESSAGE(FATAL_ERROR "Azure Sphere CMake projects must use the Ninja generator")
ENDIF()

SET(AZURE_SPHERE_MAKE_IMAGE_FILE "${AZURE_SPHERE_CMAKE_PATH}/AzureSphereMakeImage.cmake" CACHE INTERNAL "Path to the MakeImage CMake target")

# Get sysroot num vars from environment set from input variables
IF(DEFINED AZURE_SPHERE_TARGET_APPLICATION_RUNTIME_VERSION)
    SET(ENV{AzureSphereTargetApplicationRuntimeVersion} ${AZURE_SPHERE_TARGET_APPLICATION_RUNTIME_VERSION})
ENDIF()
SET(AZURE_SPHERE_SETTINGS_SYSROOT_RUNTIME_VERSION $ENV{AzureSphereTargetApplicationRuntimeVersion})
IF("${AZURE_SPHERE_SETTINGS_SYSROOT_RUNTIME_VERSION}" STREQUAL "")
    MESSAGE(FATAL_ERROR "AZURE_SPHERE_TARGET_APPLICATION_RUNTIME_VERSION not defined")
ENDIF()
STRING(REGEX MATCH "^[0-9]+$" IS_RUNTIME_VERSION_NUMBER ${AZURE_SPHERE_SETTINGS_SYSROOT_RUNTIME_VERSION})
IF("${IS_RUNTIME_VERSION_NUMBER}" STREQUAL "")
    MESSAGE(FATAL_ERROR "AZURE_SPHERE_TARGET_APPLICATION_RUNTIME_VERSION is not a number")
ENDIF()

IF(DEFINED AZURE_SPHERE_TARGET_BETA_APIS)
    SET(ENV{AzureSphereTargetBetaApis} ${AZURE_SPHERE_TARGET_BETA_APIS})
ENDIF()
SET(AZURE_SPHERE_SETTINGS_SYSROOT_BETA_APIS $ENV{AzureSphereTargetBetaApis})

# Create sysroot num from vars
SET(AZURE_SPHERE_SETTINGS_SYSROOT_NUM ${AZURE_SPHERE_SETTINGS_SYSROOT_RUNTIME_VERSION})
IF(NOT "${AZURE_SPHERE_SETTINGS_SYSROOT_BETA_APIS}" STREQUAL "")
    STRING(APPEND AZURE_SPHERE_SETTINGS_SYSROOT_NUM "+" ${AZURE_SPHERE_SETTINGS_SYSROOT_BETA_APIS})
ENDIF()

# Get available sysroot nums
FILE(GLOB AZURE_SPHERE_AVAILABLE_SYSROOTS RELATIVE "${AZURE_SPHERE_SDK_PATH}/Sysroots" "${AZURE_SPHERE_SDK_PATH}/Sysroots/*")

# Set include paths and check if given sysroot num is valid
SET(AZURE_SPHERE_SYSROOT_VALID 0)
FOREACH(AZURE_SPHERE_SYSROOT ${AZURE_SPHERE_AVAILABLE_SYSROOTS})
    SET(ENV{INCLUDE} "${AZURE_SPHERE_SDK_PATH}/Sysroots/${AZURE_SPHERE_SYSROOT}/usr/include;$ENV{INCLUDE}")
    IF("${AZURE_SPHERE_SETTINGS_SYSROOT_NUM}" STREQUAL "${AZURE_SPHERE_SYSROOT}")
        SET(AZURE_SPHERE_SYSROOT_VALID 1)
    ENDIF()
ENDFOREACH()

IF(NOT AZURE_SPHERE_SYSROOT_VALID)
    # Create error message
    SET(AZURE_SPHERE_SYSROOT_ERROR "Sysroot \"${AZURE_SPHERE_SETTINGS_SYSROOT_NUM}\" is not valid. Valid sysroots are: [")
    FOREACH(AZURE_SPHERE_SYSROOT ${AZURE_SPHERE_AVAILABLE_SYSROOTS})
        STRING(APPEND AZURE_SPHERE_SYSROOT_ERROR "${AZURE_SPHERE_SYSROOT}, ")
    ENDFOREACH()
    STRING(REGEX REPLACE ", $" "]" AZURE_SPHERE_SYSROOT_ERROR ${AZURE_SPHERE_SYSROOT_ERROR})
    MESSAGE(FATAL_ERROR ${AZURE_SPHERE_SYSROOT_ERROR})
ENDIF()

SET(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
SET(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
SET(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)

# Get hardware definition directory
IF(DEFINED AZURE_SPHERE_TARGET_HARDWARE_DEFINITION_DIRECTORY)
    SET(ENV{AzureSphereTargetHardwareDefinitionDirectory} ${AZURE_SPHERE_TARGET_HARDWARE_DEFINITION_DIRECTORY})
ENDIF()
SET(AZURE_SPHERE_HW_DIRECTORY $ENV{AzureSphereTargetHardwareDefinitionDirectory})

# Get hardware definition json
IF(DEFINED AZURE_SPHERE_TARGET_HARDWARE_DEFINITION)
    SET(ENV{AzureSphereTargetHardwareDefinition} ${AZURE_SPHERE_TARGET_HARDWARE_DEFINITION})
ENDIF()
SET(AZURE_SPHERE_HW_DEFINITION $ENV{AzureSphereTargetHardwareDefinition})

# Check if the hardware definition file exists at the specified path
IF((NOT ("${AZURE_SPHERE_HW_DEFINITION}" STREQUAL "")) AND (NOT ("${AZURE_SPHERE_HW_DIRECTORY}" STREQUAL "")))
    IF(NOT EXISTS "${AZURE_SPHERE_HW_DIRECTORY}/${AZURE_SPHERE_HW_DEFINITION}")
        MESSAGE(FATAL_ERROR "${AZURE_SPHERE_HW_DIRECTORY}/${AZURE_SPHERE_HW_DEFINITION} does not exist")
    ELSEIF(EXISTS "${AZURE_SPHERE_HW_DIRECTORY}/${AZURE_SPHERE_HW_DEFINITION}" AND IS_DIRECTORY "${AZURE_SPHERE_HW_DIRECTORY}/${AZURE_SPHERE_HW_DEFINITION}")
        MESSAGE(FATAL_ERROR "${AZURE_SPHERE_HW_DIRECTORY}/${AZURE_SPHERE_HW_DEFINITION} is a directory")
    ENDIF()
ENDIF()

# Disable linking during try_compile since our link options cause the generation to fail
SET(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)

# Add ComponentId to app_manifest if necessary
#IF(EXISTS "${CMAKE_SOURCE_DIR}/app_manifest.json")
#    FILE(READ "${CMAKE_SOURCE_DIR}/app_manifest.json" AZURE_SPHERE_APP_MANIFEST_CONTENTS)
#    STRING(REGEX MATCH "\"ComponentId\": \"([^\"]*)\"" AZURE_SPHERE_COMPONENTID "${AZURE_SPHERE_APP_MANIFEST_CONTENTS}")
#    SET(AZURE_SPHERE_COMPONENTID_VALUE "${CMAKE_MATCH_1}")
#    # CMake Regex doesn't support syntax for matching exact number of characters, so we get to do guid matching the fun way
#    SET(AZURE_SPHERE_GUID_REGEX "[0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f]")
#    SET(AZURE_SPHERE_GUID_REGEX_2 "[0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f]")
#    SET(AZURE_SPHERE_GUID_REGEX_3 "[0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f]")
#    SET(AZURE_SPHERE_GUID_REGEX_4 "[0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f]")
#    SET(AZURE_SPHERE_GUID_REGEX_5 "[0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f]")
#    STRING(APPEND AZURE_SPHERE_GUID_REGEX "-" ${AZURE_SPHERE_GUID_REGEX_2} "-" ${AZURE_SPHERE_GUID_REGEX_3} "-" ${AZURE_SPHERE_GUID_REGEX_4} "-" ${AZURE_SPHERE_GUID_REGEX_5})
#    STRING(REGEX MATCH "${AZURE_SPHERE_GUID_REGEX}" AZURE_SPHERE_COMPONENTID_GUID "${AZURE_SPHERE_COMPONENTID_VALUE}")
#    IF("${AZURE_SPHERE_COMPONENTID_GUID}" STREQUAL "")
#        # Generate random GUID
#        STRING(RANDOM LENGTH 8 ALPHABET "0123456789abcdef" AZURE_SPHERE_GUID)
#        STRING(RANDOM LENGTH 4 ALPHABET "0123456789abcdef" AZURE_SPHERE_GUID_2)
#        STRING(RANDOM LENGTH 4 ALPHABET "0123456789abcdef" AZURE_SPHERE_GUID_3)
#        STRING(RANDOM LENGTH 4 ALPHABET "0123456789abcdef" AZURE_SPHERE_GUID_4)
#        STRING(RANDOM LENGTH 12 ALPHABET "0123456789abcdef" AZURE_SPHERE_GUID_5)
#        STRING(APPEND AZURE_SPHERE_GUID "-" ${AZURE_SPHERE_GUID_2} "-" ${AZURE_SPHERE_GUID_3} "-" ${AZURE_SPHERE_GUID_4} "-" ${AZURE_SPHERE_GUID_5})
#        # Write GUID to ComponentId
#        STRING(REGEX REPLACE "\"ComponentId\": \"[^\"]*\"" "\"ComponentId\": \"${AZURE_SPHERE_GUID}\"" AZURE_SPHERE_APP_MANIFEST_CONTENTS "${AZURE_SPHERE_APP_MANIFEST_CONTENTS}")
#        FILE(WRITE "${CMAKE_SOURCE_DIR}/app_manifest.json" ${AZURE_SPHERE_APP_MANIFEST_CONTENTS})
#    ENDIF()
#ENDIF()
